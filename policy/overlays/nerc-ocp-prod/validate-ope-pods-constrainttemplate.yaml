apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredopepod
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredOPEPod
      validation:
        openAPIV3Schema:
          properties:
            allowed_images:
              type: array
              items:
                type: object
                properties:
                  image:
                    type: string
                  name:
                    type: string
                required: ["image", "name"]
            resource_size:
              type: string
              enum: ["X Small", "Small", "Medium", "Large", "X Large"]
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package K8sRequiredOPEPod

        # Function to get resource values based on size
        get_resource_values(size) = values {
          size == "X Small"
          values := {
            "cpuLimit": "1",
            "memLimit": "4Gi",
            "cpuRequest": "100m",
            "memRequest": "1Gi"
          }
        } else = values {
          size == "Small"
          values := {
            "cpuLimit": "2",
            "memLimit": "8Gi",
            "cpuRequest": "1",
            "memRequest": "8Gi"
          }
        } else = values {
          size == "Medium"
          values := {
            "cpuLimit": "6",
            "memLimit": "24Gi",
            "cpuRequest": "3",
            "memRequest": "24Gi"
          }
        } else = values {
          size == "Large"
          values := {
            "cpuLimit": "14",
            "memLimit": "56Gi",
            "cpuRequest": "7",
            "memRequest": "56Gi"
          }
        } else = values {
          size == "X Large"
          values := {
            "cpuLimit": "30",
            "memLimit": "120Gi",
            "cpuRequest": "15",
            "memRequest": "120Gi"
          }
        }

        # Check if the provided image is in the allowed list
        is_allowed_image(provided) {
          allowed := input.parameters.allowed_images[_]
          provided == allowed.image
        }

        # Get allowed image names for error message
        get_allowed_image_names = names {
          names := concat(", ", [img.name | img := input.parameters.allowed_images[_]])
        }

        # Verify class image
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          env_var := container.env[_]
          env_var.name == "JUPYTER_IMAGE"
          provided := env_var.value
          not is_allowed_image(provided)

          allowed_names := get_allowed_image_names
          msg := sprintf("Must use one of these images: [%s] with %s resource size", [allowed_names, input.parameters.resource_size])
        }

        # Verify resource size
        violation[{"msg": msg}] {
          size := input.parameters.resource_size
          resource_values := get_resource_values(size)

          container := input.review.object.spec.containers[0]

          cpuLimit := container.resources.limits.cpu
          memLimit := container.resources.limits.memory
          cpuRequest := container.resources.requests.cpu
          memRequest := container.resources.requests.memory

          any([
            cpuLimit != resource_values.cpuLimit,
            memLimit != resource_values.memLimit,
            cpuRequest != resource_values.cpuRequest,
            memRequest != resource_values.memRequest
          ])

          allowed_names := get_allowed_image_names
          msg := sprintf("Must use one of these images: [%s] with %s resource size", [allowed_names, size])
        }
